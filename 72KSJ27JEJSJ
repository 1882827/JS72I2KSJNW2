local library = loadstring(game:HttpGet("https://https://raw.githubusercontent.com/MlFrvWM/BBLT81/main/BL81827TC", true))()

local window = library:AddWindow("veyna | PAID", {
    main_color = Color3.fromRGB(61, 10, 161),
    min_size = Vector2.new(685, 650),
    can_resize = false,
})

local tabAutomation = window:AddTab("Automation")

tabAutomation:AddLabel("Settings").TextSize = 22

local walkSpeedValue = 16
tabAutomation:AddTextBox("Speed", function(text)
    local speed = tonumber(text)
    if speed and speed >= 1 and speed <= 500 then
        walkSpeedValue = speed
    end
end)

local setSpeed = false
tabAutomation:AddSwitch("Set", function(state)
    setSpeed = state
    task.spawn(function()
        while setSpeed do
            local char = game.Players.LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = walkSpeedValue
                end
            end
            task.wait(0.1)
        end
        local char = game.Players.LocalPlayer.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = 16
            end
        end
    end)
end)

local sizeValue = 1
tabAutomation:AddTextBox("Size", function(text)
    local size = tonumber(text)
    if size and size >= 1 and size <= 100 then
        sizeValue = size
    end
end)

local setSize = false
tabAutomation:AddSwitch("Set", function(state)
    setSize = state
    task.spawn(function()
        while setSize do
            local char = game.Players.LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    for _, scaleName in pairs({"BodyDepthScale", "BodyHeightScale", "BodyWidthScale", "HeadScale"}) do
                        local scaleInstance = humanoid:FindFirstChild(scaleName)
                        if scaleInstance then
                            scaleInstance.Value = sizeValue
                        end
                    end
                end
            end
            task.wait(0.1)
        end
        local char = game.Players.LocalPlayer.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                for _, scaleName in pairs({"BodyDepthScale", "BodyHeightScale", "BodyWidthScale", "HeadScale"}) do
                    local scaleInstance = humanoid:FindFirstChild(scaleName)
                    if scaleInstance then
                        scaleInstance.Value = 1
                    end
                end
            end
        end
    end)
end)

tabAutomation:AddLabel("Misc").TextSize = 22

tabAutomation:AddSwitch("Show Pets", function(State)
    local petsEvent = game:GetService("ReplicatedStorage").rEvents.showPetsEvent
    if State then
        petsEvent:FireServer("showPets")
    else
        petsEvent:FireServer("hidePets")
    end
end)

do
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local ShowOthersPets = true

    local function SetPetsVisibility(player, visible)
        if player == LocalPlayer then return end
        local character = player.Character
        if not character then return end

        local petsFolder = character:FindFirstChild("Pets")
        if petsFolder then
            for _, pet in ipairs(petsFolder:GetChildren()) do
                pet.LocalTransparencyModifier = visible and 0 or 1
            end
        end
    end

    local function WatchPetsFolder(player)
        if player == LocalPlayer then return end
        local character = player.Character
        if not character then return end

        local petsFolder = character:FindFirstChild("Pets")
        if petsFolder then
            SetPetsVisibility(player, ShowOthersPets)
            petsFolder.ChildAdded:Connect(function(pet)
                pet.LocalTransparencyModifier = ShowOthersPets and 0 or 1
            end)
        end
    end

    local function WatchCharacter(player)
        player.CharacterAdded:Connect(function()
            task.wait(0.1)
            WatchPetsFolder(player)
        end)

        if player.Character then
            WatchPetsFolder(player)
        end
    end

    local function ApplyToAllPlayers()
        for _, player in ipairs(Players:GetPlayers()) do
            SetPetsVisibility(player, ShowOthersPets)
        end
    end

    Players.PlayerAdded:Connect(WatchCharacter)
    for _, player in ipairs(Players:GetPlayers()) do
        WatchCharacter(player)
    end

    tabAutomation:AddSwitch("Show Other Pets", function(State)
        ShowOthersPets = State
        ApplyToAllPlayers()
    end)
end

local parts = {}
local partSize = 2048
local totalDistance = 50000
local startPosition = Vector3.new(-2, -9.5, -2)
local numberOfParts = math.ceil(totalDistance / partSize)

local function createParts()
    for x = 0, numberOfParts - 1 do
        for z = 0, numberOfParts - 1 do
            local newPartSide = Instance.new("Part")
            newPartSide.Size = Vector3.new(partSize, 1, partSize)
            newPartSide.Position = startPosition + Vector3.new(x * partSize, 0, z * partSize)
            newPartSide.Anchored = true
            newPartSide.Transparency = 1
            newPartSide.CanCollide = true
            newPartSide.Name = "Part_Side_" .. x .. "_" .. z
            newPartSide.Parent = workspace
            table.insert(parts, newPartSide)
            
            local newPartLeftRight = Instance.new("Part")
            newPartLeftRight.Size = Vector3.new(partSize, 1, partSize)
            newPartLeftRight.Position = startPosition + Vector3.new(-x * partSize, 0, z * partSize)
            newPartLeftRight.Anchored = true
            newPartLeftRight.Transparency = 1
            newPartLeftRight.CanCollide = true
            newPartLeftRight.Name = "Part_LeftRight_" .. x .. "_" .. z
            newPartLeftRight.Parent = workspace
            table.insert(parts, newPartLeftRight)
            
            local newPartUpLeft = Instance.new("Part")
            newPartUpLeft.Size = Vector3.new(partSize, 1, partSize)
            newPartUpLeft.Position = startPosition + Vector3.new(-x * partSize, 0, -z * partSize)
            newPartUpLeft.Anchored = true
            newPartUpLeft.Transparency = 1
            newPartUpLeft.CanCollide = true
            newPartUpLeft.Name = "Part_UpLeft_" .. x .. "_" .. z
            newPartUpLeft.Parent = workspace
            table.insert(parts, newPartUpLeft)
            
            local newPartUpRight = Instance.new("Part")
            newPartUpRight.Size = Vector3.new(partSize, 1, partSize)
            newPartUpRight.Position = startPosition + Vector3.new(x * partSize, 0, -z * partSize)
            newPartUpRight.Anchored = true
            newPartUpRight.Transparency = 1
            newPartUpRight.CanCollide = true
            newPartUpRight.Name = "Part_UpRight_" .. x .. "_" .. z
            newPartUpRight.Parent = workspace
            table.insert(parts, newPartUpRight)
        end
    end
end

local function makePartsWalkthrough()
    for _, part in ipairs(parts) do
        if part and part.Parent then
            part.CanCollide = false
        end
    end
end

local function makePartsSolid()
    for _, part in ipairs(parts) do
        if part and part.Parent then
            part.CanCollide = true
        end
    end
end

tabAutomation:AddSwitch("Walk On Water", function(bool)
    if bool then
        createParts()
    else
        makePartsWalkthrough()
    end
end)

local antiAFKConnection

local function setupAntiAFK()
    local vu = game:GetService("VirtualUser")
    antiAFKConnection = game.Players.LocalPlayer.Idled:Connect(function()
        vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        task.wait(1)
        vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end)
end

setupAntiAFK()

local antiAFKEnabled = true
tabAutomation:AddSwitch("Anti AFK", function(bool)
    antiAFKEnabled = bool
    if bool then
        if not antiAFKConnection then
            setupAntiAFK()
        end
    else
        if antiAFKConnection then
            antiAFKConnection:Disconnect()
            antiAFKConnection = nil
        end
    end
end, true)

local infJumpEnabled = false
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

player.CharacterAdded:Connect(function(char)
    character = char
    humanoid = char:WaitForChild("Humanoid")
end)

local function toggleInfJump(state)
    infJumpEnabled = state
end

game:GetService("UserInputService").JumpRequest:Connect(function()
    if infJumpEnabled and humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

tabAutomation:AddSwitch("Inf Jump", function(state)
    toggleInfJump(state)
end)
