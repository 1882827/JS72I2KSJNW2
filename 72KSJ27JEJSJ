local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/MlFrvWM/BBLT81/main/BL81827TC", true))()

local window = library:AddWindow("Veyna | PAID", {
    main_color = Color3.fromRGB(61, 10, 161),
    min_size = Vector2.new(685, 800),
    can_resize = false,
})

local tabAutomation = window:AddTab("Automation")

tabAutomation:AddLabel("Settings").TextSize = 29

local walkSpeedValue = 16
tabAutomation:AddTextBox("Speed", function(text)
    local speed = tonumber(text)
    if speed and speed >= 1 and speed <= 500 then
        walkSpeedValue = speed
    end
end)

local setSpeed = false
tabAutomation:AddSwitch("Set", function(state)
    setSpeed = state
    task.spawn(function()
        while setSpeed do
            local char = game.Players.LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = walkSpeedValue
                end
            end
            task.wait(0.1)
        end
        local char = game.Players.LocalPlayer.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = 16
            end
        end
    end)
end)

local sizeValue = 1
tabAutomation:AddTextBox("Size", function(text)
    local size = tonumber(text)
    if size and size >= 1 and size <= 100 then
        sizeValue = size
    end
end)

local function applyBodyScale(scaleValue)
    local player = game.Players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()
    local humanoid = char:FindFirstChildOfClass("Humanoid") or char:WaitForChild("Humanoid", 5)
    if not humanoid then return end

    for _, scaleName in ipairs({"BodyDepthScale", "BodyHeightScale", "BodyWidthScale", "HeadScale"}) do
        local scaleInstance = humanoid:FindFirstChild(scaleName)
        if scaleInstance and type(scaleInstance.Value) == "number" then
            scaleInstance.Value = scaleValue
        end
    end
end

tabAutomation:AddSwitch("Set", function(state)
    setSize = state
    task.spawn(function()
        while setSize do
            applyBodyScale(sizeValue)
            task.wait(0.1)
        end
        applyBodyScale(1)
    end)
end) 

local nothingLabel = tabAutomation:AddLabel("")

tabAutomation:AddLabel("Misc").TextSize = 30

tabAutomation:AddTextBox("Camera Zoom", function(v)
    local zoom = tonumber(v)
    if zoom then
        zoom = math.clamp(zoom, 0.5, 400)
        local player = game.Players.LocalPlayer
        player.CameraMinZoomDistance = zoom
        player.CameraMaxZoomDistance = zoom
    end
end)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local godModeToggle = false

local function autoJoinBrawl()
    while godModeToggle do
        pcall(function()
            ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
        end)
        task.wait(0.1)
    end
end

tabAutomation:AddSwitch("God Mode", function(state)
    godModeToggle = state
    if state then
        task.spawn(autoJoinBrawl)
    end
end)

player.CharacterAdded:Connect(function()
    if godModeToggle then
        task.spawn(autoJoinBrawl)
    end
end)

tabAutomation:AddSwitch("Show Pets", function(state)
    local rEvents = game:GetService("ReplicatedStorage"):FindFirstChild("rEvents")
    if not rEvents then return end

    local petsEvent = rEvents:FindFirstChild("showPetsEvent")
    if petsEvent and petsEvent:IsA("RemoteEvent") then
        petsEvent:FireServer(state)
    end
end)

local ShowOthersPets = true
local Players = game:GetService("Players")
local connections = {}

local function SetPetsVisibility(player, visible)
    if player == Players.LocalPlayer then return end
    local char = player.Character
    if not char then return end
    local petsFolder = char:FindFirstChild("Pets")
    if petsFolder then
        for _, pet in ipairs(petsFolder:GetChildren()) do
            if pet:IsA("Instance") and pet:FindFirstChild("LocalTransparencyModifier") then
                pet.LocalTransparencyModifier = visible and 0 or 1
            end
        end
    end
end

local function WatchPetsFolder(player)
    if player == Players.LocalPlayer then return end
    if connections[player] then return end
    connections[player] = {}

    player.CharacterAdded:Connect(function(char)
        task.wait(0.1)
        local petsFolder = char:FindFirstChild("Pets")
        if petsFolder then
            SetPetsVisibility(player, ShowOthersPets)
            table.insert(connections[player],
                petsFolder.ChildAdded:Connect(function(pet)
                    if pet:FindFirstChild("LocalTransparencyModifier") then
                        pet.LocalTransparencyModifier = ShowOthersPets and 0 or 1
                    end
                end)
            )
        end
    end)

    local existingChar = player.Character
    if existingChar then
        local petsFolder = existingChar:FindFirstChild("Pets")
        if petsFolder then
            SetPetsVisibility(player, ShowOthersPets)
            table.insert(connections[player],
                petsFolder.ChildAdded:Connect(function(pet)
                    if pet:FindFirstChild("LocalTransparencyModifier") then
                        pet.LocalTransparencyModifier = ShowOthersPets and 0 or 1
                    end
                end)
            )
        end
    end
end

Players.PlayerAdded:Connect(WatchPetsFolder)
for _, p in ipairs(Players:GetPlayers()) do
    WatchPetsFolder(p)
end

tabAutomation:AddSwitch("Show Other Pets", function(state)
    ShowOthersPets = state
    for _, player in ipairs(Players:GetPlayers()) do
        SetPetsVisibility(player, ShowOthersPets)
    end
end)

tabAutomation:AddSwitch("Disable Trade", function(State)
            if State then
                game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer("disableTrading")
            else
                game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer("enableTrading")
            end
        end)

local parts = {}
local partSize = 2048
local totalDistance = 50000
local startPosition = Vector3.new(-2, -9.5, -2)
local numberOfParts = math.ceil(totalDistance / partSize)
local partsCreated = false

local function createParts()
    if partsCreated then return end
    for x = 0, numberOfParts - 1 do
        for z = 0, numberOfParts - 1 do
            for _, offset in ipairs({
                Vector3.new(x, 0, z),
                Vector3.new(-x, 0, z),
                Vector3.new(-x, 0, -z),
                Vector3.new(x, 0, -z),
            }) do
                local newPart = Instance.new("Part")
                newPart.Size = Vector3.new(partSize, 1, partSize)
                newPart.Position = startPosition + Vector3.new(offset.X * partSize, 0, offset.Z * partSize)
                newPart.Anchored = true
                newPart.Transparency = 1
                newPart.CanCollide = true
                newPart.Parent = workspace
                table.insert(parts, newPart)
            end
        end
    end
    partsCreated = true
end

local function makePartsWalkthrough()
    for _, part in ipairs(parts) do
        if part and part.Parent then
            part.CanCollide = false
        end
    end
end

tabAutomation:AddSwitch("Walk On Water", function(bool)
    if bool then
        createParts()
    else
        makePartsWalkthrough()
    end
end)

local antiAFKConnection
local function setupAntiAFK()
    if antiAFKConnection then return end
    local vu = game:GetService("VirtualUser")
    antiAFKConnection = game.Players.LocalPlayer.Idled:Connect(function()
        vu:Button2Down(Vector2.new(), workspace.CurrentCamera.CFrame)
        task.wait(1)
        vu:Button2Up(Vector2.new(), workspace.CurrentCamera.CFrame)
    end)
end
setupAntiAFK()

tabAutomation:AddSwitch("Anti AFK", function(bool)
    if bool then
        setupAntiAFK()
    else
        if antiAFKConnection then
            antiAFKConnection:Disconnect()
            antiAFKConnection = nil
        end
    end
end, true)

local infJumpEnabled = false
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

player.CharacterAdded:Connect(function(char)
    character = char
    humanoid = char:WaitForChild("Humanoid")
end)

game:GetService("UserInputService").JumpRequest:Connect(function()
    if infJumpEnabled and humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

tabAutomation:AddSwitch("Inf Jump", function(state)
    infJumpEnabled = state
end)

local nothingLabel = tabAutomation:AddLabel("")

tabAutomation:AddLabel("Protection").TextSize = 30

tabAutomation:AddSwitch("Anti Fling", function(Value)
    if Value then
        local playerName = game.Players.LocalPlayer.Name
        local rootPart = game.Workspace:FindFirstChild(playerName):FindFirstChild("HumanoidRootPart")
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.P = 1250
        bodyVelocity.Parent = rootPart
    else
        local playerName = game.Players.LocalPlayer.Name
        local rootPart = game.Workspace:FindFirstChild(playerName):FindFirstChild("HumanoidRootPart")
        local existingVelocity = rootPart:FindFirstChild("BodyVelocity")
        if existingVelocity and existingVelocity.MaxForce == Vector3.new(100000, 0, 100000) then
            existingVelocity:Destroy()
        end
    end
end)

local switch = tabAutomation:AddSwitch("Position Lock", function(Value)
    if Value then
        
        local currentPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        getgenv().posLock = game:GetService("RunService").Heartbeat:Connect(function()
            if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = currentPos
            end
        end)
    else
        
        if getgenv().posLock then
            getgenv().posLock:Disconnect()
            getgenv().posLock = nil
        end
    end
end)

tabAutomation:AddButton("Auto Fortune Wheel", function(Value)
    _G.autoFortuneWheelActive = Value
    if Value then
        local function openFortuneWheel()
            while _G.autoFortuneWheelActive do
                local args = {
                    [1] = "openFortuneWheel",
                    [2] = game:GetService("ReplicatedStorage"):WaitForChild("fortuneWheelChances"):WaitForChild("Fortune Wheel")
                }
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("openFortuneWheelRemote"):InvokeServer(unpack(args))
                wait(0)
            end
        end
        coroutine.wrap(openFortuneWheel)()
    else
        _G.autoFortuneWheelActive = false
    end
end)

tabAutomation:AddButton("Block Trades", function(State)
            if State then
                game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer("disableTrading")
            else
                game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer("enableTrading")
            end
        end)

local autoEatBoostsEnabled = false

local boostsList = {
    "ULTRA Shake",
    "TOUGH Bar",
    "Protein Shake",
    "Energy Shake",
    "Protein Bar",
    "Energy Bar",
    "Tropical Shake"
}

local function eatAllBoosts()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()

    for _, boostName in ipairs(boostsList) do
        local boost = backpack:FindFirstChild(boostName)
        while boost do
            boost.Parent = character
            pcall(function()
                boost:Activate()
            end)
            task.wait(0)
            boost = backpack:FindFirstChild(boostName)
        end
    end
end

task.spawn(function()
    while true do
        if autoEatBoostsEnabled then
            eatAllBoosts()
            task.wait(2)
        else
            task.wait(1)
        end
    end
end)

tabAutomation:AddButton("Eat Items", function(state)
    autoEatBoostsEnabled = state
end)

local Killing = window:AddTab("Killing")

Killing:AddLabel("Kill Aura").TextSize = 30

local dropdown = Killing:AddDropdown("Select Pet", function(text)
    local petsFolder = game.Players.LocalPlayer.petsFolder
    for _, folder in pairs(petsFolder:GetChildren()) do
        if folder:IsA("Folder") then
            for _, pet in pairs(folder:GetChildren()) do
                game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("unequipPet", pet)
            end
        end
    end
    task.wait(0.2)

    local petName = text
    local petsToEquip = {}

    for _, pet in pairs(game.Players.LocalPlayer.petsFolder.Unique:GetChildren()) do
        if pet.Name == petName then
            table.insert(petsToEquip, pet)
        end
    end

    for i = 1, math.min(8, #petsToEquip) do
        game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("equipPet", petsToEquip[i])
        task.wait(0.1)
    end
end)
dropdown:Add("Wild Wizard")
dropdown:Add("Mighty Monster")

local LocalPlayer = game.Players.LocalPlayer

local button = Killing:AddSwitch("No Punch Animation", function(state)
    if state then
        local blockedAnimations = {
            ["rbxassetid://3638729053"] = true,
            ["rbxassetid://3638767427"] = true,
        }

        local function stopBlockedAnimations(humanoid)
            for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
                if track.Animation then
                    local animId = track.Animation.AnimationId
                    local animName = track.Name:lower()
                    if blockedAnimations[animId] or animName:match("punch") or animName:match("attack") or animName:match("right") then
                        track:Stop()
                    end
                end
            end
        end

        local function setupAnimationBlocking()
            local char = LocalPlayer.Character
            if not char or not char:FindFirstChild("Humanoid") then return end
            local humanoid = char:FindFirstChild("Humanoid")

            stopBlockedAnimations(humanoid)

            if not _G.AnimBlockConnection then
                _G.AnimBlockConnection = humanoid.AnimationPlayed:Connect(function(track)
                    if track.Animation then
                        local animId = track.Animation.AnimationId
                        local animName = track.Name:lower()
                        if blockedAnimations[animId] or animName:match("punch") or animName:match("attack") or animName:match("right") then
                            track:Stop()
                        end
                    end
                end)
            end
        end

        setupAnimationBlocking()

        _G.AutoPunchLoop = true
        task.spawn(function()
            while _G.AutoPunchLoop do
                local char = LocalPlayer.Character
                if char and char:FindFirstChild("Humanoid") then
                    stopBlockedAnimations(char.Humanoid)
                end

                local punch = LocalPlayer.Backpack:FindFirstChild("Punch") or (char and char:FindFirstChild("Punch"))
                if punch then
                    if punch.Parent ~= char then
                        punch.Parent = char
                    end
                    LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                    LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
                end
                task.wait(0.01)
            end
        end)

        if not _G.CharacterAddedConnection then
            _G.CharacterAddedConnection = LocalPlayer.CharacterAdded:Connect(function()
                task.wait(1)
                setupAnimationBlocking()
            end)
        end
    else
        _G.AutoPunchLoop = false
        if _G.AnimBlockConnection then _G.AnimBlockConnection:Disconnect() _G.AnimBlockConnection = nil end
    end
end)

local nothingLabel = Killing:AddLabel("")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local function checkCharacter()
    if not LocalPlayer.Character then
        repeat task.wait() until LocalPlayer.Character
    end
    return LocalPlayer.Character
end

local function gettool()
    for _, v in pairs(LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid:EquipTool(v)
        end
    end
    LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
    LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
end

local function isPlayerAlive(player)
    return player and player.Character
       and player.Character:FindFirstChild("HumanoidRootPart")
       and player.Character:FindFirstChild("Humanoid")
       and player.Character.Humanoid.Health > 0
end

local function killPlayer(target)
    if not isPlayerAlive(target) then return end
    local character = checkCharacter()
    if character and character:FindFirstChild("LeftHand") then
        pcall(function()
            firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 0)
            firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 1)
            gettool()
        end)
    end
end

local function getPlayerDisplayText(player)
    return player.DisplayName .. " | " .. player.Name
end

_G.whitelistedPlayers = _G.whitelistedPlayers or {}
_G.blacklistedPlayers = _G.blacklistedPlayers or {}

local function isWhitelisted(player)
    for _, name in ipairs(_G.whitelistedPlayers) do
        if name:lower() == player.Name:lower() then
            return true
        end
    end
    return false
end

local function isBlacklisted(player)
    for _, name in ipairs(_G.blacklistedPlayers) do
        if name:lower() == player.Name:lower() then
            return true
        end
    end
    return false
end

local whitelistTextBox = Killing:AddTextBox("Whitelist", function(inputText)
    local playerName = inputText:match("^%s*(.-)%s*$")
    if playerName ~= "" then
        for _, name in ipairs(_G.whitelistedPlayers) do
            if name:lower() == playerName:lower() then
                return
            end
        end
        table.insert(_G.whitelistedPlayers, playerName)
    end
end)

local whitelistDropdown = Killing:AddDropdown("Whitelist", function(selectedText)
    local playerName = selectedText:match("| (.+)$")
    if playerName then
        playerName = playerName:match("^%s*(.-)%s*$")
        for _, name in ipairs(_G.whitelistedPlayers) do
            if name:lower() == playerName:lower() then return end
        end
        table.insert(_G.whitelistedPlayers, playerName)
    end
end)

Killing:AddButton("Clear Whitelist", function()
    _G.whitelistedPlayers = {}
end)

Killing:AddSwitch("Whitelist Friends", function(state)
    if state then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player:IsFriendsWith(LocalPlayer.UserId) then
                local already = false
                for _, name in ipairs(_G.whitelistedPlayers) do
                    if name:lower() == player.Name:lower() then
                        already = true
                        break
                    end
                end
                if not already then
                    table.insert(_G.whitelistedPlayers, player.Name)
                end
            end
        end
    end
end)

local LocalPlayer = game.Players.LocalPlayer
local sizeToSet = 0/0
local megaSwitchEnabled = false
local posLockConnection
local safePlatform

local megaSwitch = Killing:AddSwitch("Safe Spot + Nan Size + Equip + Auto Punch + Lock", function(state)
    megaSwitchEnabled = state

    if state then
        local posX, posY, posZ = 100000, -200, 100000
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        safePlatform = Instance.new("Part")
        safePlatform.Size = Vector3.new(50, 1, 50)
        safePlatform.Position = Vector3.new(posX, posY - 3, posZ)
        safePlatform.Anchored = true
        safePlatform.CanCollide = true
        safePlatform.Color = Color3.fromRGB(255, 0, 0)
        safePlatform.Name = "SafePlatform"
        safePlatform.Parent = workspace

        task.wait(0.2)
        humanoidRootPart.CFrame = CFrame.new(posX, posY, posZ)

        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Teletransporte",
            Text = "Teleported",
            Duration = 0
        })

        local currentPos = humanoidRootPart.CFrame
        posLockConnection = game:GetService("RunService").Heartbeat:Connect(function()
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character.HumanoidRootPart.CFrame = currentPos
            end
        end)

        task.spawn(function()
            while megaSwitchEnabled do
                pcall(function()
                    game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeToSet)
                end)

                local punch = LocalPlayer.Backpack:FindFirstChild("Punch")
                if punch then
                    punch.Parent = LocalPlayer.Character
                end
                local egg = LocalPlayer.Backpack:FindFirstChild("Protein Egg")
                if egg then
                    egg.Parent = LocalPlayer.Character
                end

                local punchTool = LocalPlayer.Backpack:FindFirstChild("Punch") or LocalPlayer.Character:FindFirstChild("Punch")
                if punchTool then
                    if punchTool.Parent ~= LocalPlayer.Character then
                        punchTool.Parent = LocalPlayer.Character
                    end
                    LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                    LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
                end

                task.wait(0.01)
            end
        end)

    else
        if posLockConnection then
            posLockConnection:Disconnect()
            posLockConnection = nil
        end
        if safePlatform then
            safePlatform:Destroy()
            safePlatform = nil
        end
    end
end)

local blacklistTextbox = Killing:AddTextBox("Blacklist", function(inputText)
    local playerName = inputText:match("^%s*(.-)%s*$") -- Remove espaÃ§os no inÃ­cio/fim
    if playerName ~= "" then
        for _, name in ipairs(_G.blacklistedPlayers) do
            if name:lower() == playerName:lower() then
                return
            end
        end
        table.insert(_G.blacklistedPlayers, playerName)
    end
end, "Enter the player name")

local blacklistDropdown = Killing:AddDropdown("Blacklist", function(selectedText)
    local playerName = selectedText:match("| (.+)$")
    if playerName then
        playerName = playerName:match("^%s*(.-)%s*$")
        for _, name in ipairs(_G.blacklistedPlayers) do
            if name:lower() == playerName:lower() then return end
        end
        table.insert(_G.blacklistedPlayers, playerName)
    end
end)

Killing:AddButton("Clear Blacklist", function()
    _G.blacklistedPlayers = {}
end)

Killing:AddSwitch("Kill List", function(state)
    _G.killBlacklistedOnly = state
    if state then
        if not _G.blacklistKillConnection then
            _G.blacklistKillConnection = game:GetService("RunService").Heartbeat:Connect(function()
                for _, player in ipairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and isBlacklisted(player) then
                        killPlayer(player)
                    end
                end
            end)
        end
    else
        if _G.blacklistKillConnection then
            _G.blacklistKillConnection:Disconnect()
            _G.blacklistKillConnection = nil
        end
    end
end)

Killing:AddSwitch("Kill All", function(state)
    _G.killAll = state
    if state then
        if not _G.killAllConnection then
            _G.killAllConnection = game:GetService("RunService").Heartbeat:Connect(function()
                for _, player in ipairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and not isWhitelisted(player) then
                        killPlayer(player)
                    end
                end
            end)
        end
    else
        if _G.killAllConnection then
            _G.killAllConnection:Disconnect()
            _G.killAllConnection = nil
        end
    end
end)

local switch = Killing:AddSwitch("Kill Enemy 0/1k", function(bool)
    _G.killAll = bool
    if bool then
        if not _G.killAllConnection then
            _G.killAllConnection = game:GetService("RunService").Heartbeat:Connect(function()
                if _G.killAll then
                    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                        if player ~= game.Players.LocalPlayer and not isWhitelisted(player) then
                            local strength = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Strength")
                            if strength and strength.Value >= 0 and strength.Value <= 1000 then
                                killPlayer(player)
                            end
                        end
                    end
                end
            end)
        end
    else
        if _G.killAllConnection then
            _G.killAllConnection:Disconnect()
            _G.killAllConnection = nil
        end
    end
end)

local switch = Killing:AddSwitch("Kill Enemy Bigger 10t/90QI", function(bool)
    _G.killAll = bool
    if bool then
        if not _G.killAllConnection then
            _G.killAllConnection = game:GetService("RunService").Heartbeat:Connect(function()
                if _G.killAll then
                    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                        if player ~= game.Players.LocalPlayer and not isWhitelisted(player) and not game.Players.LocalPlayer:IsFriendsWith(player.UserId) then
                            local strength = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Strength")
                            if strength and strength.Value >= 1e14 and strength.Value <= 9e16 then
                                killPlayer(player)
                            end
                        end
                    end
                end
            end)
        end
    else
        if _G.killAllConnection then
            _G.killAllConnection:Disconnect()
            _G.killAllConnection = nil
        end
    end
end)

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local killsShown = false
local killsGui = nil

local showKillsButton = Killing:AddButton("Show Kills UI", function()
    killsShown = not killsShown

    if killsShown then
        if not killsGui then
            killsGui = Instance.new("ScreenGui")
            killsGui.Name = "KillsGui"
            killsGui.ResetOnSpawn = false
            killsGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

            local killsFrame = Instance.new("Frame")
            killsFrame.Size = UDim2.new(0, 180, 0, 55)
            killsFrame.Position = UDim2.new(0.5, -90, 0, 60)
            killsFrame.BackgroundColor3 = Color3.fromRGB(61, 10, 161)
            killsFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
            killsFrame.Active = true
            killsFrame.Draggable = true
            killsFrame.Parent = killsGui

            local titleLabel = Instance.new("TextLabel")
            titleLabel.Size = UDim2.new(1, 0, 0, 20)
            titleLabel.Position = UDim2.new(0, 0, 0, 0)
            titleLabel.BackgroundTransparency = 1
            titleLabel.Text = "Sad V1"
            titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            titleLabel.Font = Enum.Font.SourceSansBold
            titleLabel.TextScaled = true
            titleLabel.Parent = killsFrame

            local killsLabel = Instance.new("TextLabel")
            killsLabel.Size = UDim2.new(1, 0, 0, 35)
            killsLabel.Position = UDim2.new(0, 0, 0, 20)
            killsLabel.BackgroundTransparency = 1
            killsLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            killsLabel.TextScaled = true
            killsLabel.Font = Enum.Font.SourceSansBold
            killsLabel.Parent = killsFrame

            coroutine.wrap(function()
                while killsGui and killsGui.Parent do
                    local kills = LocalPlayer:FindFirstChild("leaderstats") and LocalPlayer.leaderstats:FindFirstChild("Kills")
                    if kills then
                        killsLabel.Text = "Kills: " .. tostring(kills.Value)
                    else
                        killsLabel.Text = "Kills: 0"
                    end
                    task.wait(0.2)
                end
            end)()
        else
            killsGui.Enabled = true
        end
    else
        if killsGui then
            killsGui.Enabled = false
        end
    end
end)

showKillsButton.TextColor3 = Color3.fromRGB(255, 255, 255)

Killing:AddTextBox("Range (1-140)", function(text)
    local range = tonumber(text)
    if range then
        _G.deathRingRange = math.clamp(range, 1, 140)
    end
end)

Killing:AddTextBox("Player Name (Optional)", function(text)
    _G.targetPlayerName = text
end)

Killing:AddSwitch("Protect Player", function(state)
    _G.protectPlayer = state
end)

Killing:AddSwitch("Death Ring", function(state)
    _G.deathRingEnabled = state
    if state then
        if not _G.deathRingConnection then
            _G.deathRingConnection = game:GetService("RunService").Heartbeat:Connect(function()
                local character = checkCharacter()
                local myPos = character and character:FindFirstChild("HumanoidRootPart") and character.HumanoidRootPart.Position
                if myPos then
                    for _, player in ipairs(Players:GetPlayers()) do
                        if player ~= LocalPlayer and not isWhitelisted(player) and isPlayerAlive(player) then
                            if (myPos - player.Character.HumanoidRootPart.Position).Magnitude <= (_G.deathRingRange or 20) then
                                killPlayer(player)
                            end
                        end
                    end
                end
            end)
        end
    else
        if _G.deathRingConnection then
            _G.deathRingConnection:Disconnect()
            _G.deathRingConnection = nil
        end
    end
end)

Killing:AddSwitch("Invisible", function(state)
    _G.invisible = state
end)

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        local displayText = getPlayerDisplayText(player)
        whitelistDropdown:Add(displayText)
        blacklistDropdown:Add(displayText)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        local displayText = getPlayerDisplayText(player)
        whitelistDropdown:Add(displayText)
        blacklistDropdown:Add(displayText)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    local displayText = getPlayerDisplayText(player)
    whitelistDropdown:Remove(displayText)
    blacklistDropdown:Remove(displayText)
end)

local nothingLabel = Killing:AddLabel("")

local whitelistLabel = Killing:AddLabel("Whitelisted Players:\nNone")

local nothingLabel = Killing:AddLabel("")

local blacklistLabel = Killing:AddLabel("Blacklisted Players:\nNone")

local function UpdateLabels()
    if #_G.whitelistedPlayers == 0 then
        whitelistLabel.Text = "Whitelisted Players:\nNone"
    else
        whitelistLabel.Text = "Whitelisted Players:\n" .. table.concat(_G.whitelistedPlayers, "\n")
    end

    if #_G.blacklistedPlayers == 0 then
        blacklistLabel.Text = "Blacklisted Players:\nNone"
    else
        blacklistLabel.Text = "Blacklisted Players:\n" .. table.concat(_G.blacklistedPlayers, "\n")
    end
end

game:GetService("RunService").Heartbeat:Connect(UpdateLabels)

local tabSpecs = window:AddTab("Specs")

tabSpecs:AddLabel("View Player").TextSize = 25

local SelectPlayerName, SelectPlayerUser = "", ""

local PlayerDrop = tabSpecs:AddDropdown("Select Player", function(Value)
    if typeof(Value) ~= "string" then return end
    local disp, user = Value:match("^(.-)%s+|%s+(.+)$")
    if disp and user then
        SelectPlayerName = disp
        SelectPlayerUser = user
    end
end)

local Players     = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera      = workspace:WaitForChild("CurrentCamera")

local function formatValue(n)
    n = tonumber(n) or 0
    local absn = math.abs(n)
    local sign = n < 0 and "-" or ""
    if absn >= 1e15 then return string.format("%s%.2fQa", sign, absn / 1e15)
    elseif absn >= 1e12 then return string.format("%s%.2fT",  sign, absn / 1e12)
    elseif absn >= 1e9  then return string.format("%s%.2fB",  sign, absn / 1e9)
    elseif absn >= 1e6  then return string.format("%s%.2fM",  sign, absn / 1e6)
    elseif absn >= 1e3  then return string.format("%s%.2fK",  sign, absn / 1e3)
    else return tostring(n) end
end

local function parseValue(s)
    if not s then return 0 end
    s = tostring(s):upper():gsub("%s+", ""):gsub(",", "")
    local suffixes = { K=1e3, M=1e6, B=1e9, T=1e12, QA=1e15 }
    local numPart, suf = s:match("^([%-]?[%d%.]+)(%a*)$")
    local n = tonumber(numPart) or 0
    return suf ~= "" and suffixes[suf] and n * suffixes[suf] or n
end

local function readValueObject(v)
    if not v then return 0 end
    if typeof(v) == "IntValue" or typeof(v) == "NumberValue" then return tonumber(v.Value) or 0 end
    if typeof(v) == "StringValue" then return parseValue(v.Value) end
    if typeof(v) == "number" then return v end
    if typeof(v) == "string" then return parseValue(v) end
    return 0
end

local function getStatValue(container, statName)
    local stat = container and container:FindFirstChild(statName)
    return stat and readValueObject(stat) or 0
end

local lblDisplayName = tabSpecs:AddLabel("")
local lblUsername    = tabSpecs:AddLabel("")
local lblStrength    = tabSpecs:AddLabel("")
local lblDurability  = tabSpecs:AddLabel("")
local lblAgility     = tabSpecs:AddLabel("")
local lblRebirths    = tabSpecs:AddLabel("")
local lblKills       = tabSpecs:AddLabel("")

tabSpecs:AddLabel("--------------------")
tabSpecs:AddLabel("Advanced Stats").TextSize = 20

local lblBaseDur    = tabSpecs:AddLabel("")
local lblUltimate   = tabSpecs:AddLabel("")
local lblPets       = tabSpecs:AddLabel("")
local lblTotalDur   = tabSpecs:AddLabel("")
local lblBaseDamage = tabSpecs:AddLabel("")
local lblWithPets   = tabSpecs:AddLabel("")
local lblHitsKill   = tabSpecs:AddLabel("")
local lblTimeKill   = tabSpecs:AddLabel("")

local BASE_DAMAGE_FACTOR     = 0.1
local PACK_FACTOR_PER_PACK   = 0.0335
local DEFAULT_ULTIMATE_BOOST = 75
local DEFAULT_PETS_PER_PACK  = 33.125
local DEFAULT_PACKS          = 8
local ATTACK_SPEED           = 1.3

local function toOption(plr) return string.format("%s | %s", plr.DisplayName, plr.Name) end

local function updateDropdown()
    local selected = (SelectPlayerName ~= "" and SelectPlayerUser ~= "") and (SelectPlayerName.." | "..SelectPlayerUser) or nil
    PlayerDrop:Clear()
    local stillExists = false
    for _, plr in ipairs(Players:GetPlayers()) do
        local opt = toOption(plr)
        PlayerDrop:Add(opt)
        if selected and opt == selected then stillExists = true end
    end
    if not stillExists then SelectPlayerName, SelectPlayerUser = "", "" end
end

Players.PlayerAdded:Connect(function(plr) PlayerDrop:Add(toOption(plr)) end)
Players.PlayerRemoving:Connect(updateDropdown)
updateDropdown()

local isSpectating, spectateTarget = false, nil

local function stopSpectate()
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    Camera.CameraSubject = char:WaitForChild("Humanoid")
    isSpectating, spectateTarget = false, nil
end

tabSpecs:AddButton("Print Own Stats", function()
    print("Printing stats do jogador local...")
end).TextColor3 = Color3.fromRGB(255,255,255)

tabSpecs:AddButton("Spectate", function()
    if SelectPlayerUser == "" then return end
    local target = Players:FindFirstChild(SelectPlayerUser)
    if target and target ~= LocalPlayer then
        local humanoid = (target.Character or target.CharacterAdded:Wait()):WaitForChild("Humanoid")
        Camera.CameraSubject, spectateTarget, isSpectating = humanoid, target, true
        target.CharacterAdded:Connect(function(newChar)
            if isSpectating and spectateTarget == target then
                Camera.CameraSubject = newChar:WaitForChild("Humanoid")
            end
        end)
    end
end).TextColor3 = Color3.fromRGB(255,255,255)

tabSpecs:AddButton("Stop Spectate", function()
    stopSpectate()
end).TextColor3 = Color3.fromRGB(255,255,255)

Players.PlayerRemoving:Connect(function(plr) if spectateTarget == plr then stopSpectate() end end)
LocalPlayer.CharacterAdded:Connect(function(newChar) if not isSpectating then Camera.CameraSubject = newChar:WaitForChild("Humanoid") end end)

local function getDynamicStats(plr, stats)
    local strength   = getStatValue(stats, "Strength")
    local durability = getStatValue(stats, "Durability")
    local rebirths   = getStatValue(stats, "Rebirths")
    local kills      = getStatValue(stats, "Kills")
    local agility    = getStatValue(stats, "Agility")

    local packs = getStatValue(plr, "Packs")
    if packs == 0 then packs = DEFAULT_PACKS end

    local ultimatePercent = getStatValue(plr, "UltimateBoost")
    if ultimatePercent == 0 then ultimatePercent = DEFAULT_ULTIMATE_BOOST end
    local ultimateBoost = durability * (ultimatePercent / 100)

    local petsBoostPercent = getStatValue(plr, "PetsBoost")
    if petsBoostPercent == 0 then petsBoostPercent = DEFAULT_PETS_PER_PACK * packs end
    local petsBoost = durability * (petsBoostPercent / 100)

    local totalDur   = durability + ultimateBoost + petsBoost
    local baseDamage = strength * BASE_DAMAGE_FACTOR
    local withPets   = strength * (BASE_DAMAGE_FACTOR + PACK_FACTOR_PER_PACK * packs)

    local hitsToKill = baseDamage > 0 and math.max(1, math.ceil(totalDur / baseDamage)) or 0
    local timeToKill = hitsToKill > 0 and (hitsToKill / ATTACK_SPEED) or 0

    return {
        strength = strength,
        durability = durability,
        rebirths = rebirths,
        kills = kills,
        agility = agility,
        packs = packs,
        ultimateBoost = ultimateBoost,
        petsBoost = petsBoost,
        totalDur = totalDur,
        baseDamage = baseDamage,
        withPets = withPets,
        hitsToKill = hitsToKill,
        timeToKill = timeToKill,
        ultimatePercent = ultimatePercent,
        petsBoostPercent = petsBoostPercent
    }
end

task.spawn(function()
    while task.wait(1) do
        if SelectPlayerUser ~= "" then
            local plr = Players:FindFirstChild(SelectPlayerUser)
            local stats = plr and plr:FindFirstChild("leaderstats")
            if stats then
                lblDisplayName.Text = "Displayname: " .. plr.DisplayName
                lblUsername.Text    = "Username: @" .. plr.Name

                local data = getDynamicStats(plr, stats)

                lblStrength.Text   = "Strength: "   .. formatValue(data.strength)
                lblDurability.Text = "Durability: " .. formatValue(data.durability)
                lblAgility.Text    = "Agility: "    .. formatValue(data.agility)
                lblRebirths.Text   = "Rebirths: "   .. formatValue(data.rebirths)
                lblKills.Text      = "Kills: "      .. formatValue(data.kills)

                lblBaseDur.Text  = "Base Durability: " .. formatValue(data.durability)
                lblUltimate.Text = string.format("Ultimate Boost: %s (+%d%%)", formatValue(data.ultimateBoost), data.ultimatePercent)
                lblPets.Text     = string.format("Pets Boost (%d): %s", data.packs, formatValue(data.petsBoost))

                lblTotalDur.Text      = "TOTAL DURABILITY: " .. formatValue(data.totalDur)
                lblTotalDur.TextColor3 = Color3.fromRGB(0, 255, 255)

                lblBaseDamage.Text = "Your Base Damage: " .. formatValue(data.baseDamage)
                lblWithPets.Text   = string.format("With Your Pets (%d): %s", data.packs, formatValue(data.withPets))
                lblWithPets.TextColor3 = Color3.fromRGB(255, 0, 0)

                lblHitsKill.Text = "Hits to Kill: " .. (data.hitsToKill == 1 and "INSTANT" or tostring(data.hitsToKill))
                lblTimeKill.Text = "Time to Kill: " .. (data.hitsToKill == 1 and "INSTANT" or string.format("%.1fs", data.timeToKill))
            end
        end
    end
end)
