local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/MlFrvWM/BBLT81/main/BL81827TC", true))()

local window = library:AddWindow("Veyna | PAID", {
    main_color = Color3.fromRGB(61, 10, 161),
    min_size = Vector2.new(685, 650),
    can_resize = false,
})

local tabAutomation = window:AddTab("Automation")

tabAutomation:AddLabel("Settings").TextSize = 29

local walkSpeedValue = 16
tabAutomation:AddTextBox("Speed", function(text)
    local speed = tonumber(text)
    if speed and speed >= 1 and speed <= 500 then
        walkSpeedValue = speed
    end
end)

local setSpeed = false
tabAutomation:AddSwitch("Set", function(state)
    setSpeed = state
    task.spawn(function()
        while setSpeed do
            local char = game.Players.LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = walkSpeedValue
                end
            end
            task.wait(0.1)
        end
        local char = game.Players.LocalPlayer.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = 16
            end
        end
    end)
end)

local sizeValue = 1
tabAutomation:AddTextBox("Size", function(text)
    local size = tonumber(text)
    if size and size >= 1 and size <= 100 then
        sizeValue = size
    end
end)

local function applyBodyScale(scaleValue)
    local player = game.Players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()
    local humanoid = char:FindFirstChildOfClass("Humanoid") or char:WaitForChild("Humanoid", 5)
    if not humanoid then return end

    for _, scaleName in ipairs({"BodyDepthScale", "BodyHeightScale", "BodyWidthScale", "HeadScale"}) do
        local scaleInstance = humanoid:FindFirstChild(scaleName)
        if scaleInstance and type(scaleInstance.Value) == "number" then
            scaleInstance.Value = scaleValue
        end
    end
end

tabAutomation:AddSwitch("Set", function(state)
    setSize = state
    task.spawn(function()
        while setSize do
            applyBodyScale(sizeValue)
            task.wait(0.1)
        end
        applyBodyScale(1)
    end)
end) 

local nothingLabel = tabAutomation:AddLabel("")

tabAutomation:AddLabel("Misc").TextSize = 30

tabAutomation:AddTextBox("Camera Zoom", function(v)
    local zoom = tonumber(v)
    if zoom then
        zoom = math.clamp(zoom, 0.5, 400)
        local player = game.Players.LocalPlayer
        player.CameraMinZoomDistance = zoom
        player.CameraMaxZoomDistance = zoom
    end
end)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local godModeToggle = false

local function autoJoinBrawl()
    while godModeToggle do
        pcall(function()
            ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
        end)
        task.wait(0.1)
    end
end

tabAutomation:AddSwitch("God Mode", function(state)
    godModeToggle = state
    if state then
        task.spawn(autoJoinBrawl)
    end
end)

player.CharacterAdded:Connect(function()
    if godModeToggle then
        task.spawn(autoJoinBrawl)
    end
end)

tabAutomation:AddSwitch("Show Pets", function(state)
    local rEvents = game:GetService("ReplicatedStorage"):FindFirstChild("rEvents")
    if not rEvents then return end

    local petsEvent = rEvents:FindFirstChild("showPetsEvent")
    if petsEvent and petsEvent:IsA("RemoteEvent") then
        petsEvent:FireServer(state)
    end
end)

local ShowOthersPets = true
local Players = game:GetService("Players")
local connections = {}

local function SetPetsVisibility(player, visible)
    if player == Players.LocalPlayer then return end
    local char = player.Character
    if not char then return end
    local petsFolder = char:FindFirstChild("Pets")
    if petsFolder then
        for _, pet in ipairs(petsFolder:GetChildren()) do
            if pet:IsA("Instance") and pet:FindFirstChild("LocalTransparencyModifier") then
                pet.LocalTransparencyModifier = visible and 0 or 1
            end
        end
    end
end

local function WatchPetsFolder(player)
    if player == Players.LocalPlayer then return end
    if connections[player] then return end
    connections[player] = {}

    player.CharacterAdded:Connect(function(char)
        task.wait(0.1)
        local petsFolder = char:FindFirstChild("Pets")
        if petsFolder then
            SetPetsVisibility(player, ShowOthersPets)
            table.insert(connections[player],
                petsFolder.ChildAdded:Connect(function(pet)
                    if pet:FindFirstChild("LocalTransparencyModifier") then
                        pet.LocalTransparencyModifier = ShowOthersPets and 0 or 1
                    end
                end)
            )
        end
    end)

    local existingChar = player.Character
    if existingChar then
        local petsFolder = existingChar:FindFirstChild("Pets")
        if petsFolder then
            SetPetsVisibility(player, ShowOthersPets)
            table.insert(connections[player],
                petsFolder.ChildAdded:Connect(function(pet)
                    if pet:FindFirstChild("LocalTransparencyModifier") then
                        pet.LocalTransparencyModifier = ShowOthersPets and 0 or 1
                    end
                end)
            )
        end
    end
end

Players.PlayerAdded:Connect(WatchPetsFolder)
for _, p in ipairs(Players:GetPlayers()) do
    WatchPetsFolder(p)
end

tabAutomation:AddSwitch("Show Other Pets", function(state)
    ShowOthersPets = state
    for _, player in ipairs(Players:GetPlayers()) do
        SetPetsVisibility(player, ShowOthersPets)
    end
end)

tabAutomation:AddSwitch("Disable Trade", function(State)
            if State then
                game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer("disableTrading")
            else
                game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer("enableTrading")
            end
        end)

local parts = {}
local partSize = 2048
local totalDistance = 50000
local startPosition = Vector3.new(-2, -9.5, -2)
local numberOfParts = math.ceil(totalDistance / partSize)
local partsCreated = false

local function createParts()
    if partsCreated then return end
    for x = 0, numberOfParts - 1 do
        for z = 0, numberOfParts - 1 do
            for _, offset in ipairs({
                Vector3.new(x, 0, z),
                Vector3.new(-x, 0, z),
                Vector3.new(-x, 0, -z),
                Vector3.new(x, 0, -z),
            }) do
                local newPart = Instance.new("Part")
                newPart.Size = Vector3.new(partSize, 1, partSize)
                newPart.Position = startPosition + Vector3.new(offset.X * partSize, 0, offset.Z * partSize)
                newPart.Anchored = true
                newPart.Transparency = 1
                newPart.CanCollide = true
                newPart.Parent = workspace
                table.insert(parts, newPart)
            end
        end
    end
    partsCreated = true
end

local function makePartsWalkthrough()
    for _, part in ipairs(parts) do
        if part and part.Parent then
            part.CanCollide = false
        end
    end
end

tabAutomation:AddSwitch("Walk On Water", function(bool)
    if bool then
        createParts()
    else
        makePartsWalkthrough()
    end
end)

local antiAFKConnection
local function setupAntiAFK()
    if antiAFKConnection then return end
    local vu = game:GetService("VirtualUser")
    antiAFKConnection = game.Players.LocalPlayer.Idled:Connect(function()
        vu:Button2Down(Vector2.new(), workspace.CurrentCamera.CFrame)
        task.wait(1)
        vu:Button2Up(Vector2.new(), workspace.CurrentCamera.CFrame)
    end)
end
setupAntiAFK()

tabAutomation:AddSwitch("Anti AFK", function(bool)
    if bool then
        setupAntiAFK()
    else
        if antiAFKConnection then
            antiAFKConnection:Disconnect()
            antiAFKConnection = nil
        end
    end
end, true)

local infJumpEnabled = false
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

player.CharacterAdded:Connect(function(char)
    character = char
    humanoid = char:WaitForChild("Humanoid")
end)

game:GetService("UserInputService").JumpRequest:Connect(function()
    if infJumpEnabled and humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

tabAutomation:AddSwitch("Inf Jump", function(state)
    infJumpEnabled = state
end)

local nothingLabel = tabAutomation:AddLabel("")

tabAutomation:AddLabel("Protection").TextSize = 30

tabAutomation:AddSwitch("Anti Fling", function(Value)
    if Value then
        local playerName = game.Players.LocalPlayer.Name
        local rootPart = game.Workspace:FindFirstChild(playerName):FindFirstChild("HumanoidRootPart")
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.P = 1250
        bodyVelocity.Parent = rootPart
    else
        local playerName = game.Players.LocalPlayer.Name
        local rootPart = game.Workspace:FindFirstChild(playerName):FindFirstChild("HumanoidRootPart")
        local existingVelocity = rootPart:FindFirstChild("BodyVelocity")
        if existingVelocity and existingVelocity.MaxForce == Vector3.new(100000, 0, 100000) then
            existingVelocity:Destroy()
        end
    end
end)

local switch = tabAutomation:AddSwitch("Position Lock", function(Value)
    if Value then
        
        local currentPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        getgenv().posLock = game:GetService("RunService").Heartbeat:Connect(function()
            if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = currentPos
            end
        end)
    else
        
        if getgenv().posLock then
            getgenv().posLock:Disconnect()
            getgenv().posLock = nil
        end
    end
end)

tabAutomation:AddButton("Auto Fortune Wheel", function(Value)
    _G.autoFortuneWheelActive = Value
    if Value then
        local function openFortuneWheel()
            while _G.autoFortuneWheelActive do
                local args = {
                    [1] = "openFortuneWheel",
                    [2] = game:GetService("ReplicatedStorage"):WaitForChild("fortuneWheelChances"):WaitForChild("Fortune Wheel")
                }
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("openFortuneWheelRemote"):InvokeServer(unpack(args))
                wait(0)
            end
        end
        coroutine.wrap(openFortuneWheel)()
    else
        _G.autoFortuneWheelActive = false
    end
end)

local autoEatBoostsEnabled = false

local boostsList = {
    "ULTRA Shake",
    "TOUGH Bar",
    "Protein Shake",
    "Energy Shake",
    "Protein Bar",
    "Energy Bar",
    "Tropical Shake"
}

local function eatAllBoosts()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()

    for _, boostName in ipairs(boostsList) do
        local boost = backpack:FindFirstChild(boostName)
        while boost do
            boost.Parent = character
            pcall(function()
                boost:Activate()
            end)
            task.wait(0)
            boost = backpack:FindFirstChild(boostName)
        end
    end
end

task.spawn(function()
    while true do
        if autoEatBoostsEnabled then
            eatAllBoosts()
            task.wait(2)
        else
            task.wait(1)
        end
    end
end)

tabAutomation:AddButton("Eat Items", function(state)
    autoEatBoostsEnabled = state
end)

 tabAutomation:AddButton("Block Trades", function(State)
            if State then
                game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer("disableTrading")
            else
                game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer("enableTrading")
            end
        end)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Killing = window:AddTab("Killing")

local function checkCharacter()
    while not LocalPlayer.Character do task.wait() end
    return LocalPlayer.Character
end
local function isPlayerAlive(player)
    return player and player.Character
       and player.Character:FindFirstChild("HumanoidRootPart")
       and player.Character:FindFirstChild("Humanoid")
       and player.Character.Humanoid.Health > 0
end
local function equipPunch()
    for _, v in pairs(LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" then
            LocalPlayer.Character.Humanoid:EquipTool(v)
        end
    end
end
local function killPlayer(target)
    if not isPlayerAlive(target) then return end
    local char = checkCharacter()
    if char and char:FindFirstChild("LeftHand") then
        pcall(function()
            firetouchinterest(target.Character.HumanoidRootPart, char.LeftHand, 0)
            firetouchinterest(target.Character.HumanoidRootPart, char.LeftHand, 1)
            equipPunch()
        end)
    end
end
local function getPlayerDisplay(player)
    return player.DisplayName .. " | " .. player.Name
end

_G.whitelistedPlayers = _G.whitelistedPlayers or {}
_G.blacklistedPlayers = _G.blacklistedPlayers or {}
local function isWhitelisted(player)
    for _, name in ipairs(_G.whitelistedPlayers) do
        if name:lower() == player.Name:lower() then return true end
    end
    return false
end
local function isBlacklisted(player)
    for _, name in ipairs(_G.blacklistedPlayers) do
        if name:lower() == player.Name:lower() then return true end
    end
    return false
end

local columns = Killing:AddHorizontalAlignment()

local wlColumn = columns:AddColumn()
local wlDropdown = wlColumn:AddDropdown("Whitelist", function(text)
    local pname = text:match("| (.+)$"):gsub("^%s+", ""):gsub("%s+$", "")
    if pname and not isWhitelisted({Name = pname}) then
        table.insert(_G.whitelistedPlayers, pname)
    end
end)
wlColumn:AddButton("Clear Whitelist", function()
    _G.whitelistedPlayers = {}
end)
wlColumn:AddSwitch("Whitelist Friends", function(state)
    if state then
        for _, plr in pairs(Players:GetPlayers()) do
            if plr:IsFriendsWith(LocalPlayer.UserId) and not isWhitelisted(plr) then
                table.insert(_G.whitelistedPlayers, plr.Name)
            end
        end
    end
end)
wlColumn:AddSwitch("WL Invincibility (Experimental)", function(state)
    _G.wlInvincible = state
end)

local blColumn = columns:AddColumn()
local blDropdown = blColumn:AddDropdown("Blacklist", function(text)
    local pname = text:match("| (.+)$"):gsub("^%s+", ""):gsub("%s+$", "")
    if pname and not isBlacklisted({Name = pname}) then
        table.insert(_G.blacklistedPlayers, pname)
    end
end)
blColumn:AddButton("Clear Blacklist", function()
    _G.blacklistedPlayers = {}
end)
blColumn:AddSwitch("Kill List", function(state)
    if state then
        _G.blacklistKillConn = RunService.Heartbeat:Connect(function()
            for _, plr in ipairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer and isBlacklisted(plr) and (not _G.wlInvincible or not isWhitelisted(plr)) then
                    killPlayer(plr)
                end
            end
        end)
    else
        if _G.blacklistKillConn then _G.blacklistKillConn:Disconnect() _G.blacklistKillConn = nil end
    end
end)
blColumn:AddSwitch("Kill All", function(state)
    if state then
        _G.killAllConn = RunService.Heartbeat:Connect(function()
            for _, plr in ipairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer and not isWhitelisted(plr) then
                    killPlayer(plr)
                end
            end
        end)
    else
        if _G.killAllConn then _G.killAllConn:Disconnect() _G.killAllConn = nil end
    end
end)

Killing:AddTextBox("Range (1-140)", function(text)
    local range = tonumber(text)
    if range then _G.deathRingRange = math.clamp(range, 1, 140) end
end)
Killing:AddTextBox("Player Name (Optional)", function(text)
    _G.targetPlayerName = text
end)

Killing:AddSwitch("Protect Player", function(state)
    _G.protectPlayer = state
end)
Killing:AddSwitch("Death Ring", function(state)
    if state then
        _G.deathRingConn = RunService.Heartbeat:Connect(function()
            local char = checkCharacter()
            local myPos = char and char:FindFirstChild("HumanoidRootPart") and char.HumanoidRootPart.Position
            if myPos then
                for _, plr in ipairs(Players:GetPlayers()) do
                    if plr ~= LocalPlayer and not isWhitelisted(plr) and isPlayerAlive(plr) then
                        if (myPos - plr.Character.HumanoidRootPart.Position).Magnitude <= (_G.deathRingRange or 20) then
                            killPlayer(plr)
                        end
                    end
                end
            end
        end)
    else
        if _G.deathRingConn then _G.deathRingConn:Disconnect() _G.deathRingConn = nil end
    end
end)
Killing:AddSwitch("Invisible", function(state)
    _G.invisible = state
end)

local wlLabel = Killing:AddLabel("Whitelisted players: None")
local blLabel = Killing:AddLabel("Blacklisted players: None")
local function updateLabels()
    wlLabel.Text = "Whitelisted players: " .. (#_G.whitelistedPlayers > 0 and table.concat(_G.whitelistedPlayers, ", ") or "None")
    blLabel.Text = "Blacklisted players: " .. (#_G.blacklistedPlayers > 0 and table.concat(_G.blacklistedPlayers, ", ") or "None")
end
RunService.Heartbeat:Connect(updateLabels)

for _, plr in ipairs(Players:GetPlayers()) do
    if plr ~= LocalPlayer then
        local txt = getPlayerDisplay(plr)
        wlDropdown:Add(txt)
        blDropdown:Add(txt)
    end
end
Players.PlayerAdded:Connect(function(plr)
    if plr ~= LocalPlayer then
        local txt = getPlayerDisplay(plr)
        wlDropdown:Add(txt)
        blDropdown:Add(txt)
    end
end)
Players.PlayerRemoving:Connect(function(plr)
    local txt = getPlayerDisplay(plr)
    wlDropdown:Remove(txt)
    blDropdown:Remove(txt)
end)
