local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/MlFrvWM/BBLT81/main/BL81827TC", true))()

local window = library:AddWindow("Veyna | PAID", {
    main_color = Color3.fromRGB(61, 10, 161),
    min_size = Vector2.new(685, 650),
    can_resize = false,
})

local tabAutomation = window:AddTab("Automation")
tabAutomation:AddLabel("Settings").TextSize = 22

local walkSpeedValue = 16
tabAutomation:AddTextBox("Speed", function(text)
    local speed = tonumber(text)
    if speed and speed >= 1 and speed <= 500 then
        walkSpeedValue = speed
    end
end)

local setSpeed = false
tabAutomation:AddSwitch("Set Speed", function(state)
    setSpeed = state
    task.spawn(function()
        while setSpeed do
            local char = game.Players.LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = walkSpeedValue
                end
            end
            task.wait(0.1)
        end
        local char = game.Players.LocalPlayer.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = 16
            end
        end
    end)
end)

local sizeValue = 1
tabAutomation:AddTextBox("Size", function(text)
    local size = tonumber(text)
    if size and size >= 1 and size <= 100 then
        sizeValue = size
    end
end)

local setSize = false
tabAutomation:AddSwitch("Set Size", function(state)
    setSize = state
    task.spawn(function()
        while setSize do
            local char = game.Players.LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid and humanoid:FindFirstChild("BodyHeightScale") then
                    for _, scaleName in pairs({"BodyDepthScale", "BodyHeightScale", "BodyWidthScale", "HeadScale"}) do
                        local scaleInstance = humanoid:FindFirstChild(scaleName)
                        if scaleInstance then
                            scaleInstance.Value = sizeValue
                        end
                    end
                end
            end
            task.wait(0.1)
        end
        local char = game.Players.LocalPlayer.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid:FindFirstChild("BodyHeightScale") then
                for _, scaleName in pairs({"BodyDepthScale", "BodyHeightScale", "BodyWidthScale", "HeadScale"}) do
                    local scaleInstance = humanoid:FindFirstChild(scaleName)
                    if scaleInstance then
                        scaleInstance.Value = 1
                    end
                end
            end
        end
    end)
end)

tabAutomation:AddLabel("Misc").TextSize = 22
tabAutomation:AddSwitch("Show Pets", function(State)
    local petsEvent = game:GetService("ReplicatedStorage").rEvents.showPetsEvent
    if petsEvent then
        petsEvent:FireServer(State and "showPets" or "hidePets")
    end
end)

do
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local ShowOthersPets = true
    local connections = {}

    local function SetPetsVisibility(player, visible)
        if player == LocalPlayer then return end
        local character = player.Character
        if not character then return end
        local petsFolder = character:FindFirstChild("Pets")
        if petsFolder then
            for _, pet in ipairs(petsFolder:GetChildren()) do
                pet.LocalTransparencyModifier = visible and 0 or 1
            end
        end
    end

    local function WatchPetsFolder(player)
        if player == LocalPlayer then return end
        if connections[player] then return end
        connections[player] = {}
        local function updateFolder()
            local character = player.Character
            if not character then return end
            local petsFolder = character:FindFirstChild("Pets")
            if petsFolder then
                SetPetsVisibility(player, ShowOthersPets)
                table.insert(connections[player], petsFolder.ChildAdded:Connect(function(pet)
                    pet.LocalTransparencyModifier = ShowOthersPets and 0 or 1
                end))
            end
        end
        player.CharacterAdded:Connect(function()
            task.wait(0.1)
            updateFolder()
        end)
        updateFolder()
    end

    local function ApplyToAllPlayers()
        for _, player in ipairs(Players:GetPlayers()) do
            SetPetsVisibility(player, ShowOthersPets)
        end
    end

    Players.PlayerAdded:Connect(WatchPetsFolder)
    for _, player in ipairs(Players:GetPlayers()) do
        WatchPetsFolder(player)
    end

    tabAutomation:AddSwitch("Show Other Pets", function(State)
        ShowOthersPets = State
        ApplyToAllPlayers()
    end)
end

local parts = {}
local partSize = 2048
local totalDistance = 50000
local startPosition = Vector3.new(-2, -9.5, -2)
local numberOfParts = math.ceil(totalDistance / partSize)
local partsCreated = false

local function createParts()
    if partsCreated then return end
    for x = 0, numberOfParts - 1 do
        for z = 0, numberOfParts - 1 do
            for _, offset in ipairs({
                Vector3.new(x, 0, z),
                Vector3.new(-x, 0, z),
                Vector3.new(-x, 0, -z),
                Vector3.new(x, 0, -z),
            }) do
                local newPart = Instance.new("Part")
                newPart.Size = Vector3.new(partSize, 1, partSize)
                newPart.Position = startPosition + Vector3.new(offset.X * partSize, 0, offset.Z * partSize)
                newPart.Anchored = true
                newPart.Transparency = 1
                newPart.CanCollide = true
                newPart.Parent = workspace
                table.insert(parts, newPart)
            end
        end
    end
    partsCreated = true
end

local function makePartsWalkthrough()
    for _, part in ipairs(parts) do
        if part and part.Parent then
            part.CanCollide = false
        end
    end
end

tabAutomation:AddSwitch("Walk On Water", function(bool)
    if bool then
        createParts()
    else
        makePartsWalkthrough()
    end
end)

local antiAFKConnection
local function setupAntiAFK()
    if antiAFKConnection then return end
    local vu = game:GetService("VirtualUser")
    antiAFKConnection = game.Players.LocalPlayer.Idled:Connect(function()
        vu:Button2Down(Vector2.new(), workspace.CurrentCamera.CFrame)
        task.wait(1)
        vu:Button2Up(Vector2.new(), workspace.CurrentCamera.CFrame)
    end)
end
setupAntiAFK()

tabAutomation:AddSwitch("Anti AFK", function(bool)
    if bool then
        setupAntiAFK()
    else
        if antiAFKConnection then
            antiAFKConnection:Disconnect()
            antiAFKConnection = nil
        end
    end
end, true)

local infJumpEnabled = false
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

player.CharacterAdded:Connect(function(char)
    character = char
    humanoid = char:WaitForChild("Humanoid")
end)

game:GetService("UserInputService").JumpRequest:Connect(function()
    if infJumpEnabled and humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

tabAutomation:AddSwitch("Inf Jump", function(state)
    infJumpEnabled = state
end)
